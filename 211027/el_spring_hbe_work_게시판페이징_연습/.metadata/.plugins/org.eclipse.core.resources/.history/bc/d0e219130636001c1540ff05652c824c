//kosmo62.phm.common으로 패키지를 선언한다.
package kosmo62.phm.common;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

//사용자 정의 클래스 ConnProperty를 만든다.
//접근제한자  public을 사용하여 모든 클래스에서 사용가능하다.
//abstract클래스를 사용하는 이유는 다른 클래스에서 new인스턴스화 하지 않기 위해사용한다.
//다른 클래스에서 new에서 사용하면 코드가 복잡해지고 맨날 생성자를 만들어야 하기 때문이다.
//그래서 연결정보변수들을 static을 사용하여 메모리에 올려놓고
//다른 클래스에서 접근가능하게 해준다.
public abstract class ConnProperty {
	
		//static은 함수는  클래스명.함수명으로 불러온다.
		//static없는 함수는 참조변수.함수명으로 불러온다.
		//public으로 모든 클래스에서 사용이 가능하고, static으로 메모리에 바로 올린다. 
		//final로 멤버변수들을 함부로 변경해서 사용하지 말자.
		public static final String ORCL_URL="jdbc:oracle:thin:@127.0.0.1:1521:orclphm";
		public static final String ORCL_USER="scott";
		public static final String ORCL_PASS="tiger";
		public static final String ORCL_JDBCDRIVER="oracle.jdbc.driver.OracleDriver";

		
		//public으로 모든 클래스에서 사용가능하다.
		//static으로 메모리에 올린다.
		//return값으로 Connection을 받는다.
		// ClassNotFoundException과 SQLException 처리를 하기 위해서 Exception처리를 해줬다.
		public static Connection getConnection() throws Exception{
			System.out.println("PhmConnProperty getConnection() 시작 >>>>");
			
			//지역변수는 꼭 초기화를 해줘야한다.
			Connection conn=null;
			
			//Class.forName("클래스이름.변수명") 
			//함수를 이용해서 클래스명.변수명 클래스를 
		    // 찾아서 newInstacne() 함수를 이용하는 방법
		    //클래스를 메모리에 올리는 방법이다.
			//ConnProperty.ORCL_JDBCDRIVER의 문자열을 가진 클래스를 찾는다.
			Class.forName(ConnProperty.ORCL_JDBCDRIVER);
			conn=DriverManager.getConnection(ConnProperty.ORCL_URL,
					ConnProperty.ORCL_USER,
					ConnProperty.ORCL_PASS);

			System.out.println("PhmConnProperty getConnection() 끝 >>>>");
			
			return conn;
		
		}//end of getConnection
	
		//S
		//select문 조회할 때 닫는 close함수
		public static void conClose(Connection conn,PreparedStatement pstmt,ResultSet rsRs){
			 try {
				
				 //연결정보를 열었던 순서 반대로 닫아준다.
				 if(rsRs !=null){
					 try {
						 //연결을 닫아준다.
						rsRs.close();
						//close함수는 개발자 함수를 받아서 쓰는거라서 
						//혹시 모를 남은 데이터가 있을 수 있어서 null로 초기화 해준다.
						rsRs=null;
					} catch (Exception ex) {
					}
				 }
				 
				 
				 if(pstmt !=null){
					 try{
						 pstmt.close();
						 pstmt=null;
					 }catch (Exception e) {
					}
				 }
				 
				 if(conn !=null){
					 try{
						 conn.close();
						 conn=null;
					 }catch (Exception e) {
					}
				 }
			} catch (Exception e2) {
				System.out.println("ConnPropety DB 에러 >>> : " + e2.getMessage());
			}
			
		}//end of conClose(conn,pstmt,rsRs)
		
		//IUD
		//insert,update,delete문을 사용했을때 닫는 함수
		public static void conClose(Connection conn,PreparedStatement pstmt){
			
			try {
				if(pstmt !=null){
					try{
						pstmt.close();
						pstmt=null;
					}catch (Exception e) {
					}
				}
				
				if(conn !=null){
					try{
						conn.close();
						conn=null;
					}catch (Exception e) {
					}
				}
			} catch (Exception e) {
			}
		}//end of conClose(conn,pstmt)
	
}//end of ConnProperty
